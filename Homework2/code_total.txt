
}//====================================HOMEWORK1==========================================

#include <stdio.h>
#include <math.h>
double zoid(double a, double b, double (*func)(double),double n,double h);
double one_over_x_squared(double x);
double one_over_one_plus_x(double x);
void print_table(double a, double b, double (*func)(double) );
int main(int argc, char **argv){
    print_table(0.0,1.0,one_over_one_plus_x);
    return 0;
}

double zoid(double a, double b, double (*func)(double),double n,double h){
  double T_N = 0.0; //end return value
  for(double i =1.0; i<n;i++){//gurantees n function evaluations
    T_N = T_N + (*func)(a+i*h);
    //printf("f(%f) = %f\n",a+i*h,(*func)(a+i*h)); debug print statement
  }
  T_N = h*(T_N + ((*func)(a) + (*func)(b))/2);
  return T_N;
}

double one_over_x_squared(double x){
  return (1/pow(x,2.0));
}

double one_over_one_plus_x(double x){
  return(1/(1+x));
}
void print_table(double a, double b, double (*func)(double) ){
  printf("n \t h value: \t Integral value: \t Relative error:\n");
 for (double i = 1; i <= 5; ++i){
    double h = ((b-a)/pow(2,i));
    double I = zoid(a,b,*func, pow(2,i),h);
    double rel_err = (I - log((double) 2.0))/pow(h,2) ;
    printf("%d \t %1.2e \t %1.2e \t \t %1.2e\n", (int)pow(2,i) , h , I, rel_err );
  }
}
//==========================================================================================//====================================HOMEWORK2==========================================


#include <stdio.h>
#include <math.h>
double simp(double a, double b, double (*func)(double),double n,double h);
double e_x_sin_x(double x);
double sin_x(double x);
void print_table(double a, double b, double (*func)(double) ,double precision);
int main(int argc, char **argv){
    //print_table(0.0,(3.14/2),sin_x);
    double precision = (1.0/pow(10.0,8.0));
    print_table(0.0,2.0,e_x_sin_x,precision);
    return 0;
}

double simp(double a, double b, double (*func)(double),double n,double h){
  double T_N = 0.0; //end return value
  double T_N_odd = 0.0;
  double T_N_even = 0.0;
  for(double i =1.0; i<n;i=i+2){//gurantees n function evaluations
    T_N_odd = T_N_odd + (*func)(a+i*h);
    //printf("f(%f) = %f\n",a+i*h,(*func)(a+i*h)); //debug print statement
  }
  for(double i =2.0; i<n;i=i+2){//gurantees n function evaluations
    T_N_even = T_N_even + (*func)(a+i*h);
    //printf("f(%f) = %f\n",a+i*h,(*func)(a+i*h)); //debug print statement
  }

  T_N = (h/3.0)*(4.0*T_N_odd + 2.0*T_N_even + (*func)(a) + (*func)(b));
  return T_N;
}

double e_x_sin_x(double x){
  return exp(-x)*sin(x);
}
double sin_x(double x){
  return sin(x);
}

void print_table(double a, double b, double (*func)(double) , double precision){
  printf("n \t h value: \t Integral value: \t Relative error:\n");
  double old_I = 0.0;
 for (double i = 1; i <= 10; ++i){ // do not exceed 10
    double h = ((b-a)/pow(2,i));
    double I = simp(a,b,*func, pow(2,i),h);
    double rel_err = (I - old_I)/pow(h,4) ;
    printf("%d \t %1.2e \t %1.2e \t \t %1.2e\n", (int)pow(2,i) , h , I, rel_err );
    if( fabs(I - old_I) < precision){
       printf("precision reached \n");
       break;
    }
    old_I = I;

  }
}

//==========================================================================================//====================================HOMEWORK3==========================================
#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <stdbool.h>

//***Integration Methods****
double zoid(double a, double b, double (*func)(double),double n,double h);
double** romb(double a, double b,  double(*func)(double),int array_size, double precision);

//**Auxillary Functions
bool check_precision(double** integral_array,int i, double precision,bool v);
double I_to_k(double I_n, double I_half, double k);
int size_k(int size_n);

//***Integrands***
double gauss_fn(double x);
double one_over_x_squared(double x);

//***Array Functions**
void print_array(double** integral_array,double precision);
double** intialize_array(int size_n);
void free_array(double** integral_array, int size_n);



int main(int argc, char **argv){
    double precision = (1.0/pow(10.0,12.0));
    int array_size = 10;
    double** integral_array = romb(0.0,1.0,gauss_fn,array_size,precision);
    print_array(integral_array,precision);
    free_array(integral_array,array_size);
    return 0;
}

double** romb(double a, double b,  double(*func)(double),int array_size,double precision){
  double** integral_array = intialize_array(array_size+1);
  for(int i =0; i<array_size;i++){
    double n = pow(2,(double)i);
    double h = (b-a)/n;
    for(int j=0; j<=i;j++){
       //printf("[%d,%d], \n",i,j );
       if(j==0){integral_array[i][j]= zoid(a,b,(*func),n,h);}
       if(j>=1){
        //integral_array[i][j] = 1.1;
        integral_array[i][j]= I_to_k(integral_array[i][j-1],integral_array[i-1][j-1],(double)j);
      }
    }
    if(check_precision(integral_array,i,precision,false)){
      break;
    }
  }

  return integral_array;
}


double zoid(double a, double b, double (*func)(double),double n,double h){
  double T_N = 0.0; //end return value
  for(double i =1.0; i<n;i++){//gurantees n function evaluations
    T_N = T_N + (*func)(a+i*h);
    //printf("f(%f) = %f\n",a+i*h,(*func)(a+i*h));// debug print statement
  }
  T_N = h*(T_N + ((*func)(a) + (*func)(b))/2);
  return T_N;
}


double gauss_fn(double x){
  return 1/(exp(pow(x,2)/2));
}

double one_over_x_squared(double x){
  return (1/pow(x,2.0));
}




double** intialize_array(int size_n){
    double** integral_array = (double** )malloc(size_n*sizeof(double *));
    for(int i=0;i<size_n;i++){
      integral_array[i] = calloc(size_k(i), sizeof(double *));
    }
    return integral_array;

}

void free_array(double** integral_array,int size_n){
     for(int i =0; i<size_n ;i++){
      free(integral_array[i]);
     }
     free(integral_array);
     return;
}

int size_k(int size_n){
      return  pow(2,(double)(size_n));
}

double I_to_k(double I_n, double I_half, double k){
  return (pow(4.0,k)*I_n - I_half)/(pow(4.0,k) -1);
}

bool check_precision(double** integral_array,int i,double precision,bool v){
    if(i!=0){
        double diff = fabs((integral_array[i-1][i-1]-integral_array[i][i]));
        if(v){ printf(" %5.3e",diff ); }
      if(diff < precision){
         return true;
      }else{
        return false;
      }
    }
     if(v){ printf("%10s","N/A"); }
     return false;
}

void print_array(double** integral_array,double precision){
  printf("%-10s%-12s%-22s%-22s%-22s%-22s%-22s\n","Intervals","Precision","k=1","k=2","k=3","k=4","k=5");
  for (int i = 0; i < 16; ++i)
  {
    if(integral_array[i][0] == 0 ){printf("\n"); break;}
    printf("n = %-2.0f %-1s",pow(2,i),"");
    check_precision(integral_array,i,precision, true);
    for (int j = 0; j <16; ++j)
    { 
      if(integral_array[i][j] == 0 ){break;}
      printf("%-1s %.11f ","",integral_array[i][j]);

    }
    printf("\n");
    //check_precision(integral_array,i,(1/pow(10,12)),true);
  }
}

//==========================================================================================//====================================HOMEWORK5==========================================

#include <stdio.h>
#include <math.h>
#define PI 3.14159265358979323846

double simp(double a, double b, double (*func)(double,double),double n,double h,double theta_m);
void print_table(double a, double b, double (*func)(double,double) , double precision,double theta_m);
double ellipitcal_intgrand(double theta_m, double theta);// does not include constant

int main(int argc, char **argv){
    double precision = (1.0/pow(10.0,12.0));
    double theta_m_array[5] ={.1,.2,PI/4.0,PI/2.0,3.0*PI/4.0} ;   
    printf("Using simpson rule to calculate ellipitical integrals to 10^-12 precision\n");
    for(int i = 0 ; i <5;i++){
    	printf("----------theta_m = %.3f----------\n",theta_m_array[i]);
        print_table(0.0,PI/2.0,ellipitcal_intgrand,precision,theta_m_array[i]);
        printf("\n");
    } 
    return 0;
}

double simp(double a, double b, double (*func)(double,double),double n,double h, double theta_m){
  double T_N = 0.0; //end return value
  double T_N_odd = 0.0;
  double T_N_even = 0.0;
  for(double i =1.0; i<n;i=i+2){//gurantees n function evaluations
    T_N_odd = T_N_odd + (*func)(theta_m, a+i*h);
    //printf("f(%f) = %f\n",a+i*h,(*func)(a+i*h)); //debug print statement
  }
  for(double i =2.0; i<n;i=i+2){//gurantees n function evaluations
    T_N_even = T_N_even + (*func)(theta_m, a+i*h);
    //printf("f(%f) = %f\n",a+i*h,(*func)(a+i*h)); //debug print statement
  }

  T_N = (h/3.0)*(4.0*T_N_odd + 2.0*T_N_even + (*func)(theta_m,a) + (*func)(theta_m,b));
  return T_N;
}

 void print_table(double a, double b, double (*func)(double,double) , double precision,double theta_m){
    printf("n \t h value: \t Integral value: \t Relative error:\n");
    double old_I = 0.0;
    for (double i = 1; i <= 10; ++i){ // do not exceed 10
       double h = ((b-a)/pow(2,i));
       double I = (2.0/PI)*simp(a,b,*func, pow(2,i),h,theta_m);
       double rel_err = (I - old_I)/pow(h,4) ;
       printf("%d \t %1.2e \t %1.12e \t \t %1.2e\n", (int)pow(2,i) , h , I, rel_err );
       if( fabs(I - old_I) < precision){
          printf("precision reached \n");
          printf("Best Intergal Value = %1.12f\n", I );
          break;
       }
       old_I = I;

    }
} 

double ellipitcal_intgrand(double theta_m, double theta){ // does not include constant
	double psi = sin(theta/2.0)*sin(theta_m/2.0);
    double denom = 1.0 - pow((sin(theta_m/2.0)),2.0)*pow(psi,2.0);
    return 1/sqrt(denom); 
}

#include <stdio.h>
#include <math.h>
#include <stdlib.h>
#include <stdbool.h>


//make substution u = x^1/2
double mid_point(double a, double b, double (*func)(double),double n);
double integrand(double x);

int main(int argc, char **argv){
	printf("%-10s%-10s\n","n","M_n");
	for (int i = 0; i < 10; ++i)
    {
		double interval = pow(2,(double)i);
		printf("%-9.0f %-6.4f\n",interval,mid_point(0.0,1.0,integrand,interval));
	}


    return 0;
}

double mid_point(double a, double b, double (*func)(double),double n){
  double h=(b-a)/n;
  double T_N = 0.0; //end return value
  for(double i =1.0; i<=n;i++){//gurantees n function evaluations
    T_N = T_N + (*func)(a+0.5*i*h);
     //printf("f(%f) = %f\n",a+0.5*i*h,(*func)(a+0.5*i*h)); //debug print statement
  }
  T_N = h*(T_N);// + (*func)(a+0.5*h)+ (*func)(b-0.5*h));
  return T_N;
}

double integrand(double x){
	return 2*(sin(pow(x,2.0))/(pow(x,2.0)));
}#include <stdio.h>
#include <math.h>
#define PI 3.14159265358979323846


struct pair {
      double x_value;
      double w_value;
};

struct pair N_2[2] ={
     {0.7071068,0.8862269},
     {-0.7071068,0.8862269},
};

struct pair N_3[3] ={
    {1.2247449,0.2954090},
    {0.0000000,1.1816359},
    {-1.2247449,0.2954090},
};

struct pair N_4[4] ={
	{ 1.6506801,0.0813128},
    {0.5246476,0.8049141},
    {-0.5246476,0.8049141},
    { -1.6506801,0.0813128}
};

double approximation(struct pair *N, double (*func)(double),int limit);
double x_2 (double x);
double x_4 (double x);
double x_6 (double x);
double exp_fn(double x);
//====================================HOMEWORK7==========================================







int main(int argc, char **argv){
	double(*fn_array[3])(double) = {x_2,x_4,x_6};
	struct pair* pair_array[3]={N_2,N_3,N_4};
	printf("%-10s%-10s%-10s%-10s\n", "N","x^2","x^4","x^6");
	for (int i = 0; i < 3; ++i){
		printf("%-10d", i+2 );
		for(int j=0 ;j<3; j++){
            printf("%-10.4f",approximation(pair_array[i],fn_array[j],i+2));
        } 
        printf("\n");

	}
	printf("Part B I - %f\n",approximation(N_4,exp_fn,4));
    return 0;
}

double approximation(struct pair *N, double (*func)(double),int limit){
	 double sum = 0.0;
	 for(int i = 0 ; i < limit;i++){
    	sum  = sum + N[i].w_value*(*func)(N[i].x_value);
    }
    return sum;

}

double x_2 (double x){
	return pow(x,2.0);
}
double x_4 (double x){
	return pow(x,4.0);
}
double x_6 (double x){
	return pow(x,6.0);
}
double exp_fn(double x){
	double denom = 1+exp(x);
	return 1.0/denom;
}

//==========================================================================================